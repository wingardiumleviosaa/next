<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on UlaGraphy</title><link>https://ulagraphy.netlify.com/categories/devops/</link><description>Recent content in DevOps on UlaGraphy</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Mar 2023 21:10:00 +0000</lastBuildDate><atom:link href="https://ulagraphy.netlify.com/categories/devops/rss.xml" rel="self" type="application/rss+xml"/><item><title>[Terrascan] init with connect to github error</title><link>https://ulagraphy.netlify.com/post/terrascan-init-with-connect-to-github-error/</link><pubDate>Tue, 14 Mar 2023 21:10:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/terrascan-init-with-connect-to-github-error/</guid><description>&lt;h2 id="tldr">TL;DR
&lt;a class="header-anchor" href="#tldr">&lt;/a>
&lt;/h2>&lt;p>在使用 terrascan 當作 IAC 語法檢查工具時，發現跑在公司內部環境的 gitlab pipeline 都會卡在 terrascan init 的錯誤。&lt;/p></description></item><item><title>[Azure] 使用 Vault Secrets API 如何取得超過 25 筆後的資料</title><link>https://ulagraphy.netlify.com/post/get-azure-vault-secret-for-all/</link><pubDate>Sat, 18 Feb 2023 16:32:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/get-azure-vault-secret-for-all/</guid><description>&lt;h2 id="tl-dr">TL; DR
&lt;a class="header-anchor" href="#tl-dr">&lt;/a>
&lt;/h2>&lt;p>使用 Azure key vault 的 API Get 所有 secrets 時可以利用 &lt;code>maxresults&lt;/code> 的參數限制回傳的筆數，預設為 25 筆，但經測試，最大的顯示筆數也就是 25 筆了，要如何取得全部的 secrets 呢? 以此篇記錄。&lt;/p></description></item><item><title>[Azure] 透過 Managment API 建立訂閱帳戶</title><link>https://ulagraphy.netlify.com/post/create-subscription-by-azure-mgmt-api-and-spn/</link><pubDate>Tue, 14 Feb 2023 16:32:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/create-subscription-by-azure-mgmt-api-and-spn/</guid><description>&lt;h2 id="tldr">TL;DR
&lt;a class="header-anchor" href="#tldr">&lt;/a>
&lt;/h2>&lt;p>本篇文章記錄透過 Azure Management API 使用 Azure Service Principal 權限授權，建立 Billing Account 類型為 Enterprise Agreement 的 Subscription 訂閱帳戶。&lt;/p></description></item><item><title>[Docker] 在 wsl docker 出現 exec no such file or directory 錯誤</title><link>https://ulagraphy.netlify.com/post/docker-exec-no-such-file-or-directory-in-wsl/</link><pubDate>Wed, 28 Dec 2022 20:22:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/docker-exec-no-such-file-or-directory-in-wsl/</guid><description>&lt;h2 id="tldr">TL;DR
&lt;a class="header-anchor" href="#tldr">&lt;/a>
&lt;/h2>&lt;p>在 windows 環境下 build docker image 並跑 container 時會出現 &lt;code>exec xxx no such file or directory&lt;/code> 的錯誤，但明明使用同樣的 dockerfile 在 linux 環境卻沒問題。&lt;/p></description></item><item><title>[Docker] Run Cronjob as Non Root User in Alpine Container</title><link>https://ulagraphy.netlify.com/post/devops-run-cronjob-as-non-root-user-in-alpine-docker-container/docker-run-cronjob-as-non-root-user-in-alpine-container/</link><pubDate>Sun, 23 Oct 2022 19:02:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-run-cronjob-as-non-root-user-in-alpine-docker-container/docker-run-cronjob-as-non-root-user-in-alpine-container/</guid><description>&lt;h2 id="tldr">TL;DR
&lt;a class="header-anchor" href="#tldr">&lt;/a>
&lt;/h2>&lt;p>apline image 預設只能給 root 執行 crond，但剛好遇到有不允許 container 使用 root 執行的安全政策的情況。本篇記錄如何在 apline container 中使用 non root user 執行 crond。&lt;/p></description></item><item><title>[Ansible] Windows Update with Authenticated Proxy</title><link>https://ulagraphy.netlify.com/post/devops-ansible-windows-update-with-auth-proxy/ansible-windows-update-with-auth-proxy/</link><pubDate>Sun, 23 Oct 2022 18:59:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-ansible-windows-update-with-auth-proxy/ansible-windows-update-with-auth-proxy/</guid><description>&lt;h2 id="背景">背景
&lt;a class="header-anchor" href="#%e8%83%8c%e6%99%af">&lt;/a>
&lt;/h2>&lt;p>在透過 ansible windows update module 更新 windows 時，都會因為 proxy 沒有設置而失敗。&lt;/p></description></item><item><title>[Ansible] couldn't resolve module/action 'ansible.windows.win_powershell</title><link>https://ulagraphy.netlify.com/post/devops-ansible-cannot-resolve-module-action-windows-win-powershell/ansible-coundnot-resolve-module-action/</link><pubDate>Sun, 23 Oct 2022 18:52:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-ansible-cannot-resolve-module-action-windows-win-powershell/ansible-coundnot-resolve-module-action/</guid><description>&lt;h2 id="問題">問題
&lt;a class="header-anchor" href="#%e5%95%8f%e9%a1%8c">&lt;/a>
&lt;/h2>&lt;p>在 alphine 3.13 安裝 ansible 以及相關 ansible 模組後打包 docker image，在執行時 ansible.windows.win_powershell 模組時會報錯&lt;/p></description></item><item><title>[Terraform] azurerm_key_vault_secret Error: Provider produced inconsistent result after apply</title><link>https://ulagraphy.netlify.com/post/devops-terraform-azurerm-key-vault-secret-error-provider-produced-inconsistent-result/terraform-azurerm-key-vault-bug/</link><pubDate>Wed, 21 Sep 2022 20:31:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-terraform-azurerm-key-vault-secret-error-provider-produced-inconsistent-result/terraform-azurerm-key-vault-bug/</guid><description>&lt;h2 id="問題描述">問題描述
&lt;a class="header-anchor" href="#%e5%95%8f%e9%a1%8c%e6%8f%8f%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;p>使用 Terraform 的 azurerm provider 創建 key vault secret 時，會出現以下錯誤：&lt;/p></description></item><item><title>[Ansible] winrm plaintext: the specified credentials were rejected by the server</title><link>https://ulagraphy.netlify.com/post/devops-ansible-winrm-plaintext-the-specified-credential-were-reject-by-server/ansible-winrm-plaintext-credentials-error/</link><pubDate>Tue, 06 Sep 2022 21:11:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-ansible-winrm-plaintext-the-specified-credential-were-reject-by-server/ansible-winrm-plaintext-credentials-error/</guid><description>&lt;p>紀錄 Ansible 使用 Add host 動態新增 Windows 控制節點時，遇到的 winrm 問題及解決方法。&lt;/p></description></item><item><title>Azure IoT Hub node-red 實做</title><link>https://ulagraphy.netlify.com/post/devops-azure-iot-hub-to-nodered/azure-iot-hub-to-nodered/</link><pubDate>Mon, 30 May 2022 10:07:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-azure-iot-hub-to-nodered/azure-iot-hub-to-nodered/</guid><description>&lt;p>本篇記錄如何使用 Node-Red 實作 Azure IoT Hub 的資料傳輸。&lt;/p></description></item><item><title>[Ansible] get_fact ipv4 address 取到 eth0</title><link>https://ulagraphy.netlify.com/post/ansible-get-fact-to-target-nic/</link><pubDate>Thu, 19 May 2022 13:02:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/ansible-get-fact-to-target-nic/</guid><description>&lt;h2 id="tl-dr">TL; DR
&lt;a class="header-anchor" href="#tl-dr">&lt;/a>
&lt;/h2>&lt;p>Ansible 的控制節點以及受控節點皆使用 VM 打起來，在控制節點使用 get-facts 要取得受控節點的 IP 資料時，總是會取得第一張網卡 eth0，但目標是要取得第二張網卡。&lt;/p></description></item><item><title>[Terraform] helm_release Pass Array/List to Set's Value</title><link>https://ulagraphy.netlify.com/post/devops-terraform-helm-release-set-array/terraform-helm-release-pass-array/</link><pubDate>Thu, 19 May 2022 08:58:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-terraform-helm-release-set-array/terraform-helm-release-pass-array/</guid><description>&lt;p>在 terraform 使用 helm_release，在傳入 set 參數時遇到有 chart 指定要 array 型態的值，但使用 &lt;code>[]&lt;/code> 傳入 string array 卻會報無法 iterate array。在這邊紀錄一下解法。&lt;/p></description></item><item><title>Install KVM (libvert) by Vagrant on CentOS</title><link>https://ulagraphy.netlify.com/post/devops-install-kvm-libvertd-by-vagrant-on-centos/install-kvm-by-vagrant-on-centos/</link><pubDate>Mon, 16 May 2022 17:49:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-kvm-libvertd-by-vagrant-on-centos/install-kvm-by-vagrant-on-centos/</guid><description>&lt;p>上次紀錄了如何在 Ubuntu 透過 Virtualbox 使用 Vagrant，本篇文章記錄如何在 CentOS 透過 KVM 使用 Vagrant 自動化建立 VM。&lt;/p></description></item><item><title>Vagrant on Ubuntu</title><link>https://ulagraphy.netlify.com/post/devops-install-vagrunt-on-ubuntu/install-vagrunt-on-ubuntu/</link><pubDate>Sat, 14 May 2022 10:01:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-vagrunt-on-ubuntu/install-vagrunt-on-ubuntu/</guid><description>&lt;p>Vagrant 是由 HashiCorp 開源、使用 Ruby 開發的虛擬機器管理工具，用於管理如 VirtualBox、VMware、AWS 等 VM，主要好處是可以提供一個可配置、可移植和復用的虛擬機環境，可快速地使用設定檔 (Vagrantfile) 和 command line 自動化安裝、配置一台 VM，降低了開發者搭建環境的時間。&lt;/p></description></item><item><title>創建 GitLab CICD pipeline 完成自動部屬到 Kubernetes</title><link>https://ulagraphy.netlify.com/post/devops-gitlab-cicd-pipeline-on-k8s/build-cicd-pipeline-and-cd-to-k8s/</link><pubDate>Fri, 15 Apr 2022 18:18:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-gitlab-cicd-pipeline-on-k8s/build-cicd-pipeline-and-cd-to-k8s/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>在還沒接觸 CI/CD 時，一直有『這東西一定很難』的預設立場，直到開始撰寫第一個 .gitlab-ci.yml 時，心理認知的困難度仍沒消失。不過慶幸的是，網路上的教學真的很多，GitLab 社群也超給力的有著豐富的文檔跟範例。GitLab CI/CD 整體架構 (gitlab server、runner、excutor、pipeline、stage、job) 其實很單純，所以在實做時，可以把自動化需求切分，先從第一段 build 開始做，做成功後，再進階到 test 及 deploy。把困難的任務分段做，感覺就不那麼難以親近了！&lt;/p></description></item><item><title>在 Kubernetes 上使用 helm 建立 GitLab Runner</title><link>https://ulagraphy.netlify.com/post/devops-install-gitlab-runner-on-k8s-using-helm/install-gitlab-runner-on-k8s-by-helm/</link><pubDate>Sun, 10 Apr 2022 16:36:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-gitlab-runner-on-k8s-using-helm/install-gitlab-runner-on-k8s-by-helm/</guid><description>&lt;p>GitLab Runner 是一個獨立的程序，可以用以下三種方式安裝，請參考
&lt;a href="https://docs.gitlab.com/runner/install/" title="官網教學" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
官網教學
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>GitLab Official Repositories RPM/deb packages&lt;/li>
&lt;li>Using Binaries&lt;/li>
&lt;li>Using Containers&lt;/li>
&lt;/ul></description></item><item><title>GitLab CICD 介紹</title><link>https://ulagraphy.netlify.com/post/devops-gitlab-cicd-intro/gitlab-cicd-intro/</link><pubDate>Sun, 10 Apr 2022 16:34:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-gitlab-cicd-intro/gitlab-cicd-intro/</guid><description>&lt;h2 id="cicd">CI/CD
&lt;a class="header-anchor" href="#cicd">&lt;/a>
&lt;/h2>&lt;p>&lt;img src="https://ulagraphy.netlify.com/imgs/img-lazy-loading.gif" data-src="https://imgur.com/g4KAXij.png" alt="" />&lt;/p></description></item><item><title>使用 docker-compose 建立 Harbor 私有倉庫 (w/ https)</title><link>https://ulagraphy.netlify.com/post/devops-install-harbor-by-docker-compose/install-harbor-by-docker-compose/</link><pubDate>Sun, 10 Apr 2022 15:55:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-harbor-by-docker-compose/install-harbor-by-docker-compose/</guid><description>&lt;p>默認情況下，Harbor 不附帶證書，可以直接使用 http 訪問。但在正式上線的環境中，建議配置 https。&lt;/p></description></item><item><title>[Git] Your branch and 'origin/master' have diverged</title><link>https://ulagraphy.netlify.com/post/devops-git-your-branch-and-origin-master-have-diverged/git-your-branch-and-origin-master-have-diverged/</link><pubDate>Tue, 29 Mar 2022 20:19:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-git-your-branch-and-origin-master-have-diverged/git-your-branch-and-origin-master-have-diverged/</guid><description>&lt;p>在 git status 的時後發現本地端跟遠端倉庫 commit 分岔 (diverged)，代表本地所在的分支跟遠端倉庫的分支各走各的路。&lt;/p></description></item><item><title>Terraform 從 0.14 升級到 1.1.7 問題排查</title><link>https://ulagraphy.netlify.com/post/devops-terraform-upgrade-to-v1.1.7/terraform-upgrade-to-1-1-7/</link><pubDate>Tue, 22 Mar 2022 17:13:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-terraform-upgrade-to-v1.1.7/terraform-upgrade-to-1-1-7/</guid><description>&lt;p>手上有 Terraform 0.14 版跑的腳本，最近發現 Terraform 已經升級到 1.1.7 了，便打算在升級的環境下，跑 0.14 版跑成功的腳本，看看是否有誤，紀錄一下遇到的問題以及解法。&lt;/p></description></item><item><title>Containerd (crictl) 配置私有鏡像倉庫</title><link>https://ulagraphy.netlify.com/post/devops-containerd-crictl-configure-private-img-registry/containerd-configure-private-harbor/</link><pubDate>Wed, 16 Mar 2022 18:23:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-containerd-crictl-configure-private-img-registry/containerd-configure-private-harbor/</guid><description>&lt;p>前幾天將 k8s 升級到 1.23 版，使用 containerd 當 CRI，立馬就遇到要拉取私有 image registry 的狀況，本文紀錄配置過程。&lt;/p></description></item><item><title>VirtualBox 安裝 VM 錯誤 (E_FAIL 0x80004005) 之解決</title><link>https://ulagraphy.netlify.com/post/os-virtualbox-vm-efail/virtualbox-efail-error/</link><pubDate>Mon, 21 Feb 2022 19:14:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/os-virtualbox-vm-efail/virtualbox-efail-error/</guid><description>&lt;p>在 Win10 使用 VirtualBox 安裝 VM 時遇到下述錯誤，紀錄一下解決方式。&lt;/p></description></item><item><title>[Docker] 包 Selenium Chrome Docker Image</title><link>https://ulagraphy.netlify.com/post/devops-selenium-chrome-docker-img/build-selenium-chrome-docker-image/</link><pubDate>Mon, 24 Jan 2022 17:27:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-selenium-chrome-docker-img/build-selenium-chrome-docker-image/</guid><description>&lt;p>紀錄一下把 golang 改寫的 selenium 爬蟲程式包成 docker image 遇到的問題。&lt;/p></description></item><item><title>[Docker] 使用 docker-compose 建立 GitLab (w/ https)</title><link>https://ulagraphy.netlify.com/post/devops-install-gitlab-by-docker-compose/install-gitlab-server-by-docker-compose/</link><pubDate>Fri, 29 Oct 2021 13:48:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-gitlab-by-docker-compose/install-gitlab-server-by-docker-compose/</guid><description>&lt;h2 id="安裝-docker--docker-compose">安裝 docker &amp;amp; docker compose
&lt;a class="header-anchor" href="#%e5%ae%89%e8%a3%9d-docker--docker-compose">&lt;/a>
&lt;/h2>&lt;p>請參考之前的筆記&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://ulahsieh.netlify.app/p/install-docker-and-docker-compose-on-centos7/" title="Install Docker &amp;amp;amp; Docker Compose on CentOS" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
Install Docker &amp;amp; Docker Compose on CentOS
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://ulahsieh.netlify.app/p/install-docker-and-docker-compose-on-ubuntu18/" title="Install Docker &amp;amp;amp; Docker Compose on Ubuntu18.04" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
Install Docker &amp;amp; Docker Compose on Ubuntu18.04
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Node-RED] mail node 534-5.7.14 Error</title><link>https://ulagraphy.netlify.com/post/programming-node-red-mail-node-send-error/nodered-mail-node-error/</link><pubDate>Tue, 26 Oct 2021 09:39:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/programming-node-red-mail-node-send-error/nodered-mail-node-error/</guid><description>&lt;p>當 google 帳號設置了啟用 &lt;strong>&lt;code>允許安全性較低的應用程式&lt;/code>&lt;/strong>，但 node-red 的 mail node 還是出現 &lt;code>534-5.7.14 Please log in via your web browser and then try again.&lt;/code> 的錯誤。&lt;/p></description></item><item><title>[Terraform] Upgrade to the Latest Version</title><link>https://ulagraphy.netlify.com/post/devops-terraform-upgrade/terraform-upgrage-to-v1/</link><pubDate>Tue, 14 Sep 2021 13:02:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-terraform-upgrade/terraform-upgrage-to-v1/</guid><description>&lt;p>目前的環境使用的 terraform 版本是 v0.13.5&lt;/p>
&lt;p>&lt;img src="https://ulagraphy.netlify.com/imgs/img-lazy-loading.gif" data-src="https://imgur.com/QDUkUEk.png" alt="" />&lt;/p>
&lt;p>參考以下官網說明，如果從 0.13 版要往最新版 v1 升，需要先升到 0.14。&lt;/p></description></item><item><title>[Docker] 建立 golang 中使用到 oracle instant client 的 image</title><link>https://ulagraphy.netlify.com/post/devops-build-golang-and-oracle-instant-client-img/build-golang-and-oracle-instant-client-docker-image/</link><pubDate>Tue, 07 Sep 2021 22:05:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-build-golang-and-oracle-instant-client-img/build-golang-and-oracle-instant-client-docker-image/</guid><description>&lt;p>紀錄一下建立的過程中總共遇到兩個問題：&lt;/p></description></item><item><title>[Docker] docker build network error</title><link>https://ulagraphy.netlify.com/post/devops-docker-build-network-error/docker-build-network-error/</link><pubDate>Tue, 31 Aug 2021 21:09:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-docker-build-network-error/docker-build-network-error/</guid><description>&lt;p>在 build docker image 時發生 &lt;code>network error&lt;/code> 的錯誤&lt;/p></description></item><item><title>Terraform Connection to Kuberentes Refused Error</title><link>https://ulagraphy.netlify.com/post/devops-terraform-connection-refused-error/terraform-connection-refused-error/</link><pubDate>Sun, 29 Aug 2021 21:40:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-terraform-connection-refused-error/terraform-connection-refused-error/</guid><description>&lt;h2 id="問題">問題
&lt;a class="header-anchor" href="#%e5%95%8f%e9%a1%8c">&lt;/a>
&lt;/h2>&lt;p>在 terrform apply 的時候一直卡在 &lt;code>Error: Post &amp;quot;http://localhost/api/v1/namespaces&amp;quot;: dial tcp [::1]:80: connect: connection refused&lt;/code> 的錯誤&lt;/p></description></item><item><title>[Docker] Install Docker &amp; Docker Compose on CentOS7</title><link>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-centos7/install-docker-and-docker-compose-on-centos7/</link><pubDate>Tue, 15 Dec 2020 21:52:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-centos7/install-docker-and-docker-compose-on-centos7/</guid><description>&lt;h2 id="移除舊版">移除舊版
&lt;a class="header-anchor" href="#%e7%a7%bb%e9%99%a4%e8%88%8a%e7%89%88">&lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ sudo yum remove docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-client &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-client-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-common &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-latest-logrotate &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-logrotate &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-engine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[Docker] 在不同電腦中傳 Docker image</title><link>https://ulagraphy.netlify.com/post/devops-copy-docker-image-to-different-host/copy-docker-image-to-other-host/</link><pubDate>Tue, 18 Aug 2020 14:54:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-copy-docker-image-to-different-host/copy-docker-image-to-other-host/</guid><description>&lt;p>通常 docker image 都會放在公開的 repository DockerHub 或是私有的 docker registry 上供使用者 pull，但如果沒有打算公開到網路上或是無架設 repo 的需求，又要在別台電腦上使用 build 好的 docker image 時，就需要使用備份的方式傳遞 image。&lt;/p></description></item><item><title>[Docker] Install Docker &amp; Docker Compose on Ubuntu 18.04</title><link>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-ubuntu/install-docker-and-docker-compose-on-ubuntu18/</link><pubDate>Tue, 18 Aug 2020 14:48:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-ubuntu/install-docker-and-docker-compose-on-ubuntu18/</guid><description>&lt;p>官方 Ubuntu repository 中提供的 Docker 可能不是最新版本。 為確保獲得最新版本，本篇將從官方 Docker 存儲庫安裝。 為此，我們將添加一個新的 package source，從 Docker 中添加 GPG 密鑰以確保下載有效，然後安裝該程序包。&lt;/p></description></item><item><title>[Docker] 限制 log 大小以避免硬碟爆掉</title><link>https://ulagraphy.netlify.com/post/devops-truncate-docker-log/docker-truncate-docker-log/</link><pubDate>Fri, 14 Aug 2020 11:15:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-truncate-docker-log/docker-truncate-docker-log/</guid><description>&lt;p>默認情況下，Docker 會抓所有 container 的標準輸出和標準錯誤 (stdout &amp;amp; stderr)，並將其寫入 &lt;code>/var/lib/docker/containers/[container-id]/[container-id]-json.log&lt;/code> 的 json 文件中。&lt;/p></description></item><item><title>[Git] 在同一台電腦中設置多個 Git 帳號</title><link>https://ulagraphy.netlify.com/post/devops-git-multi-account/git-multi-account-on-same-pc/</link><pubDate>Wed, 05 Aug 2020 17:46:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-git-multi-account/git-multi-account-on-same-pc/</guid><description>&lt;h2 id="為每個帳號產生-ssh-key">為每個帳號產生 ssh key
&lt;a class="header-anchor" href="#%e7%82%ba%e6%af%8f%e5%80%8b%e5%b8%b3%e8%99%9f%e7%94%a2%e7%94%9f-ssh-key">&lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ ssh-keygen -t rsa -C &amp;#34;userName@address&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[Git] Basic Git (3) 一些狀況劇</title><link>https://ulagraphy.netlify.com/post/devops-git-basic-3/git-basic-3/</link><pubDate>Sat, 13 Jun 2020 10:45:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-git-basic-3/git-basic-3/</guid><description>&lt;h2 id="想改最後一次的-commit-message">想改最後一次的 commit message
&lt;a class="header-anchor" href="#%e6%83%b3%e6%94%b9%e6%9c%80%e5%be%8c%e4%b8%80%e6%ac%a1%e7%9a%84-commit-message">&lt;/a>
&lt;/h2>&lt;p>在本地端 git commit 後發現 commit message 打錯了，只要下 &lt;code>$ git commit --amend&lt;/code>即可進入 vim 編輯器做修改。&lt;/p></description></item><item><title>[Git] Basic Git (2) - Branch &amp; GitHub</title><link>https://ulagraphy.netlify.com/post/devops-git-basic-2/git-basic-2/</link><pubDate>Sat, 13 Jun 2020 09:18:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-git-basic-2/git-basic-2/</guid><description>&lt;h2 id="branch-概念">branch 概念
&lt;a class="header-anchor" href="#branch-%e6%a6%82%e5%bf%b5">&lt;/a>
&lt;/h2>&lt;p>一般在線性開發時會是以下這樣：&lt;/p>
&lt;p>&lt;img src="https://ulagraphy.netlify.com/imgs/img-lazy-loading.gif" data-src="https://imgur.com/yxIhSIN.png" alt="" />&lt;/p>
&lt;p>當在開發新功能時，發現當下開發的版本有舊有的 bug，此時如果一邊開發一邊改 bug 可能會導致產出的東西有衝突。&lt;br>
而如果引入分支 branch，讓開發新功能以及 debug 兩邊各自獨立完成，而後再進行合併，就可以把工作乾淨地切割開來。目的是為了保持主枝幹的穩定，因為在開發新功能的時候不可能隨時保持穩定狀態，所以在確定穩定前都不會影響到主幹。&lt;/p>
&lt;p>&lt;img src="https://ulagraphy.netlify.com/imgs/img-lazy-loading.gif" data-src="https://imgur.com/KGfAOUW.png" alt="" />&lt;/p></description></item><item><title>[Git] Basic Git (1) - Intro &amp; Init, add, commit, status...</title><link>https://ulagraphy.netlify.com/post/devops-git-basic-1/git-basic-1/</link><pubDate>Sat, 13 Jun 2020 07:15:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-git-basic-1/git-basic-1/</guid><description>前言 在沒有版本控制系統前，如果有一個常常在修改的檔案，又想保留每個版本狀態時，我們常會在編輯檔案前複製一個備份，時間久了就會變得非常不便且難</description></item><item><title>[Git] Build a Git Server on Ubuntu</title><link>https://ulagraphy.netlify.com/post/devops-git-server/build-git-server-on-ubuntu/</link><pubDate>Sat, 14 Mar 2020 19:48:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-git-server/build-git-server-on-ubuntu/</guid><description>&lt;h2 id="step-1-電腦vm-環境設置">Step 1: 電腦/VM 環境設置
&lt;a class="header-anchor" href="#step-1-%e9%9b%bb%e8%85%a6vm-%e7%92%b0%e5%a2%83%e8%a8%ad%e7%bd%ae">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>作業系統選擇 Ubuntu 或其他 Linux 版本&lt;/li>
&lt;li>開啟 SSH port&lt;/li>
&lt;li>新增使用者帳號 git&lt;/li>
&lt;/ul></description></item></channel></rss>