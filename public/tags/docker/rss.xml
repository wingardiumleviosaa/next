<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on UlaGraphy</title><link>https://ulagraphy.netlify.com/tags/docker/</link><description>Recent content in Docker on UlaGraphy</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 28 Dec 2022 20:22:00 +0000</lastBuildDate><atom:link href="https://ulagraphy.netlify.com/tags/docker/rss.xml" rel="self" type="application/rss+xml"/><item><title>[Docker] 在 wsl docker 出現 exec no such file or directory 錯誤</title><link>https://ulagraphy.netlify.com/post/docker-exec-no-such-file-or-directory-in-wsl/</link><pubDate>Wed, 28 Dec 2022 20:22:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/docker-exec-no-such-file-or-directory-in-wsl/</guid><description>&lt;h2 id="tldr">TL;DR
&lt;a class="header-anchor" href="#tldr">&lt;/a>
&lt;/h2>&lt;p>在 windows 環境下 build docker image 並跑 container 時會出現 &lt;code>exec xxx no such file or directory&lt;/code> 的錯誤，但明明使用同樣的 dockerfile 在 linux 環境卻沒問題。&lt;/p></description></item><item><title>[Docker] Run Cronjob as Non Root User in Alpine Container</title><link>https://ulagraphy.netlify.com/post/devops-run-cronjob-as-non-root-user-in-alpine-docker-container/docker-run-cronjob-as-non-root-user-in-alpine-container/</link><pubDate>Sun, 23 Oct 2022 19:02:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-run-cronjob-as-non-root-user-in-alpine-docker-container/docker-run-cronjob-as-non-root-user-in-alpine-container/</guid><description>&lt;h2 id="tldr">TL;DR
&lt;a class="header-anchor" href="#tldr">&lt;/a>
&lt;/h2>&lt;p>apline image 預設只能給 root 執行 crond，但剛好遇到有不允許 container 使用 root 執行的安全政策的情況。本篇記錄如何在 apline container 中使用 non root user 執行 crond。&lt;/p></description></item><item><title>使用 docker-compose 建立 Harbor 私有倉庫 (w/ https)</title><link>https://ulagraphy.netlify.com/post/devops-install-harbor-by-docker-compose/install-harbor-by-docker-compose/</link><pubDate>Sun, 10 Apr 2022 15:55:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-harbor-by-docker-compose/install-harbor-by-docker-compose/</guid><description>&lt;p>默認情況下，Harbor 不附帶證書，可以直接使用 http 訪問。但在正式上線的環境中，建議配置 https。&lt;/p></description></item><item><title>Containerd (crictl) 配置私有鏡像倉庫</title><link>https://ulagraphy.netlify.com/post/devops-containerd-crictl-configure-private-img-registry/containerd-configure-private-harbor/</link><pubDate>Wed, 16 Mar 2022 18:23:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-containerd-crictl-configure-private-img-registry/containerd-configure-private-harbor/</guid><description>&lt;p>前幾天將 k8s 升級到 1.23 版，使用 containerd 當 CRI，立馬就遇到要拉取私有 image registry 的狀況，本文紀錄配置過程。&lt;/p></description></item><item><title>[Docker] 包 Selenium Chrome Docker Image</title><link>https://ulagraphy.netlify.com/post/devops-selenium-chrome-docker-img/build-selenium-chrome-docker-image/</link><pubDate>Mon, 24 Jan 2022 17:27:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-selenium-chrome-docker-img/build-selenium-chrome-docker-image/</guid><description>&lt;p>紀錄一下把 golang 改寫的 selenium 爬蟲程式包成 docker image 遇到的問題。&lt;/p></description></item><item><title>[Docker] 使用 docker-compose 建立 GitLab (w/ https)</title><link>https://ulagraphy.netlify.com/post/devops-install-gitlab-by-docker-compose/install-gitlab-server-by-docker-compose/</link><pubDate>Fri, 29 Oct 2021 13:48:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-gitlab-by-docker-compose/install-gitlab-server-by-docker-compose/</guid><description>&lt;h2 id="安裝-docker--docker-compose">安裝 docker &amp;amp; docker compose
&lt;a class="header-anchor" href="#%e5%ae%89%e8%a3%9d-docker--docker-compose">&lt;/a>
&lt;/h2>&lt;p>請參考之前的筆記&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://ulahsieh.netlify.app/p/install-docker-and-docker-compose-on-centos7/" title="Install Docker &amp;amp;amp; Docker Compose on CentOS" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
Install Docker &amp;amp; Docker Compose on CentOS
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://ulahsieh.netlify.app/p/install-docker-and-docker-compose-on-ubuntu18/" title="Install Docker &amp;amp;amp; Docker Compose on Ubuntu18.04" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
Install Docker &amp;amp; Docker Compose on Ubuntu18.04
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[Docker] 建立 golang 中使用到 oracle instant client 的 image</title><link>https://ulagraphy.netlify.com/post/devops-build-golang-and-oracle-instant-client-img/build-golang-and-oracle-instant-client-docker-image/</link><pubDate>Tue, 07 Sep 2021 22:05:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-build-golang-and-oracle-instant-client-img/build-golang-and-oracle-instant-client-docker-image/</guid><description>&lt;p>紀錄一下建立的過程中總共遇到兩個問題：&lt;/p></description></item><item><title>[Docker] docker build network error</title><link>https://ulagraphy.netlify.com/post/devops-docker-build-network-error/docker-build-network-error/</link><pubDate>Tue, 31 Aug 2021 21:09:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-docker-build-network-error/docker-build-network-error/</guid><description>&lt;p>在 build docker image 時發生 &lt;code>network error&lt;/code> 的錯誤&lt;/p></description></item><item><title>[Docker] Install Docker &amp; Docker Compose on CentOS7</title><link>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-centos7/install-docker-and-docker-compose-on-centos7/</link><pubDate>Tue, 15 Dec 2020 21:52:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-centos7/install-docker-and-docker-compose-on-centos7/</guid><description>&lt;h2 id="移除舊版">移除舊版
&lt;a class="header-anchor" href="#%e7%a7%bb%e9%99%a4%e8%88%8a%e7%89%88">&lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>$ sudo yum remove docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-client &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-client-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-common &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-latest-logrotate &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-logrotate &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-engine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[Docker] 在不同電腦中傳 Docker image</title><link>https://ulagraphy.netlify.com/post/devops-copy-docker-image-to-different-host/copy-docker-image-to-other-host/</link><pubDate>Tue, 18 Aug 2020 14:54:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-copy-docker-image-to-different-host/copy-docker-image-to-other-host/</guid><description>&lt;p>通常 docker image 都會放在公開的 repository DockerHub 或是私有的 docker registry 上供使用者 pull，但如果沒有打算公開到網路上或是無架設 repo 的需求，又要在別台電腦上使用 build 好的 docker image 時，就需要使用備份的方式傳遞 image。&lt;/p></description></item><item><title>[Docker] Install Docker &amp; Docker Compose on Ubuntu 18.04</title><link>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-ubuntu/install-docker-and-docker-compose-on-ubuntu18/</link><pubDate>Tue, 18 Aug 2020 14:48:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-install-docker-and-docker-compose-on-ubuntu/install-docker-and-docker-compose-on-ubuntu18/</guid><description>&lt;p>官方 Ubuntu repository 中提供的 Docker 可能不是最新版本。 為確保獲得最新版本，本篇將從官方 Docker 存儲庫安裝。 為此，我們將添加一個新的 package source，從 Docker 中添加 GPG 密鑰以確保下載有效，然後安裝該程序包。&lt;/p></description></item><item><title>[Docker] 限制 log 大小以避免硬碟爆掉</title><link>https://ulagraphy.netlify.com/post/devops-truncate-docker-log/docker-truncate-docker-log/</link><pubDate>Fri, 14 Aug 2020 11:15:00 +0000</pubDate><guid>https://ulagraphy.netlify.com/post/devops-truncate-docker-log/docker-truncate-docker-log/</guid><description>&lt;p>默認情況下，Docker 會抓所有 container 的標準輸出和標準錯誤 (stdout &amp;amp; stderr)，並將其寫入 &lt;code>/var/lib/docker/containers/[container-id]/[container-id]-json.log&lt;/code> 的 json 文件中。&lt;/p></description></item></channel></rss>